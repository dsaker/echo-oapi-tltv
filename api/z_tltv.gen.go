// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for JSONPatchRequestAddReplaceTestOp.
const (
	Add     JSONPatchRequestAddReplaceTestOp = "add"
	Replace JSONPatchRequestAddReplaceTestOp = "replace"
	Test    JSONPatchRequestAddReplaceTestOp = "test"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// JSONPatchRequestAddReplaceTest defines model for JSONPatchRequestAddReplaceTest.
type JSONPatchRequestAddReplaceTest struct {
	// Op The operation to perform.
	Op JSONPatchRequestAddReplaceTestOp `json:"op"`

	// Path A JSON Pointer path.
	Path string `json:"path"`

	// Value The value to add, replace or test.
	Value interface{} `json:"value"`
}

// JSONPatchRequestAddReplaceTestOp The operation to perform.
type JSONPatchRequestAddReplaceTestOp string

// NewTitle defines model for NewTitle.
type NewTitle struct {
	// LanguageId Language id of title
	LanguageId int64 `json:"languageId"`

	// NumSubs Number of phrases
	NumSubs int32 `json:"numSubs"`

	// Title Name of the title
	Title string `json:"title"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Email of user
	Email string `json:"email"`

	// Flipped switch between learning from or to native language
	Flipped bool `json:"flipped"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int64 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int64 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// NewUserPermission defines model for NewUserPermission.
type NewUserPermission struct {
	// PermissionId Permission id of permission
	PermissionId int64 `json:"permission_id"`

	// UserId User id of user
	UserId int64 `json:"user_id"`
}

// PatchRequest defines model for PatchRequest.
type PatchRequest = []PatchRequest_Item

// PatchRequest_Item defines model for PatchRequest.Item.
type PatchRequest_Item struct {
	union json.RawMessage
}

// Title defines model for Title.
type Title struct {
	// Id Unique id of the title
	Id int64 `json:"id"`

	// LanguageId Language id of title
	LanguageId int64 `json:"languageId"`

	// NumSubs Number of phrases
	NumSubs int32 `json:"numSubs"`

	// Title Name of the title
	Title string `json:"title"`
}

// User defines model for User.
type User struct {
	// Email Email of user
	Email string `json:"email"`

	// Flipped switch between learning from or to native language
	Flipped bool `json:"flipped"`

	// Id Unique id of the user
	Id int64 `json:"id"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int64 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int64 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	// Password Password of user
	Password string `json:"password"`

	// Username Username of user
	Username string `json:"username"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	// Jwt token of user
	Jwt string `json:"jwt"`
}

// UserPermissionResponse defines model for UserPermissionResponse.
type UserPermissionResponse struct {
	// Id Unique id of the user permission
	Id int64 `json:"id"`

	// PermissionId Permission id of permission
	PermissionId int64 `json:"permission_id"`

	// UserId User id of user
	UserId int64 `json:"user_id"`
}

// FindTitlesParams defines parameters for FindTitles.
type FindTitlesParams struct {
	// Similarity find titles similar to
	Similarity *string `form:"similarity,omitempty" json:"similarity,omitempty"`

	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddTitleJSONRequestBody defines body for AddTitle for application/json ContentType.
type AddTitleJSONRequestBody = NewTitle

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// UpdateUserApplicationJSONPatchPlusJSONRequestBody defines body for UpdateUser for application/json-patch+json ContentType.
type UpdateUserApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// AddUserPermissionJSONRequestBody defines body for AddUserPermission for application/json ContentType.
type AddUserPermissionJSONRequestBody = NewUserPermission

// AsJSONPatchRequestAddReplaceTest returns the union data inside the PatchRequest_Item as a JSONPatchRequestAddReplaceTest
func (t PatchRequest_Item) AsJSONPatchRequestAddReplaceTest() (JSONPatchRequestAddReplaceTest, error) {
	var body JSONPatchRequestAddReplaceTest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJSONPatchRequestAddReplaceTest overwrites any union data inside the PatchRequest_Item as the provided JSONPatchRequestAddReplaceTest
func (t *PatchRequest_Item) FromJSONPatchRequestAddReplaceTest(v JSONPatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJSONPatchRequestAddReplaceTest performs a merge with any union data inside the PatchRequest_Item, using the provided JSONPatchRequestAddReplaceTest
func (t *PatchRequest_Item) MergeJSONPatchRequestAddReplaceTest(v JSONPatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchRequest_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchRequest_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all titles
	// (GET /titles)
	FindTitles(ctx echo.Context, params FindTitlesParams) error
	// Creates a new title
	// (POST /titles)
	AddTitle(ctx echo.Context) error
	// Deletes a title by ID
	// (DELETE /titles/{id})
	DeleteTitle(ctx echo.Context, id int64) error
	// Returns a title by ID
	// (GET /titles/{id})
	FindTitleByID(ctx echo.Context, id int64) error
	// Creates a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Login a user
	// (POST /users/login)
	LoginUser(ctx echo.Context) error
	// Deletes a user by ID
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id int64) error
	// Returns a user by ID
	// (GET /users/{id})
	FindUserByID(ctx echo.Context, id int64) error
	// Patch an existing user
	// (PATCH /users/{id})
	UpdateUser(ctx echo.Context, id int64) error

	// (POST /userspermissions)
	AddUserPermission(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindTitles converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:r"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTitlesParams
	// ------------- Optional query parameter "similarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "similarity", ctx.QueryParams(), &params.Similarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter similarity: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitles(ctx, params)
	return err
}

// AddTitle converts echo context to params.
func (w *ServerInterfaceWrapper) AddTitle(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddTitle(ctx)
	return err
}

// DeleteTitle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTitle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTitle(ctx, id)
	return err
}

// FindTitleByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitleByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitleByID(ctx, id)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// FindUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindUserByID(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// AddUserPermission converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserPermission(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"global:admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserPermission(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/titles", wrapper.FindTitles)
	router.POST(baseURL+"/titles", wrapper.AddTitle)
	router.DELETE(baseURL+"/titles/:id", wrapper.DeleteTitle)
	router.GET(baseURL+"/titles/:id", wrapper.FindTitleByID)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.POST(baseURL+"/users/login", wrapper.LoginUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:id", wrapper.FindUserByID)
	router.PATCH(baseURL+"/users/:id", wrapper.UpdateUser)
	router.POST(baseURL+"/userspermissions", wrapper.AddUserPermission)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
