// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: voices.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const listVoices = `-- name: ListVoices :many
SELECT id, language_id, language_codes, ssml_gender, name, natural_sample_rate_hertz FROM voices
`

func (q *Queries) ListVoices(ctx context.Context) ([]Voice, error) {
	rows, err := q.db.QueryContext(ctx, listVoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Voice{}
	for rows.Next() {
		var i Voice
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			pq.Array(&i.LanguageCodes),
			&i.SsmlGender,
			&i.Name,
			&i.NaturalSampleRateHertz,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectVoiceById = `-- name: SelectVoiceById :one
SELECT id, language_id, language_codes, ssml_gender, name, natural_sample_rate_hertz FROM voices WHERE id = $1
`

func (q *Queries) SelectVoiceById(ctx context.Context, id int16) (Voice, error) {
	row := q.db.QueryRowContext(ctx, selectVoiceById, id)
	var i Voice
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		pq.Array(&i.LanguageCodes),
		&i.SsmlGender,
		&i.Name,
		&i.NaturalSampleRateHertz,
	)
	return i, err
}

const selectVoicesByLanguageId = `-- name: SelectVoicesByLanguageId :many
SELECT id, language_id, language_codes, ssml_gender, name, natural_sample_rate_hertz FROM voices WHERE language_id = $1
`

func (q *Queries) SelectVoicesByLanguageId(ctx context.Context, languageID int16) ([]Voice, error) {
	rows, err := q.db.QueryContext(ctx, selectVoicesByLanguageId, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Voice{}
	for rows.Next() {
		var i Voice
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			pq.Array(&i.LanguageCodes),
			&i.SsmlGender,
			&i.Name,
			&i.NaturalSampleRateHertz,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
