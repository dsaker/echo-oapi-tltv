// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: translates.sql

package db

import (
	"context"
)

const deleteTranslatesByLanguageId = `-- name: DeleteTranslatesByLanguageId :exec
DELETE FROM translates
WHERE language_id =$1 and phrase_id in (
    SELECT FROM phrases WHERE title_id = $2
    )
`

type DeleteTranslatesByLanguageIdParams struct {
	LanguageID int16 `json:"language_id"`
	TitleID    int64 `json:"title_id"`
}

func (q *Queries) DeleteTranslatesByLanguageId(ctx context.Context, arg DeleteTranslatesByLanguageIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteTranslatesByLanguageId, arg.LanguageID, arg.TitleID)
	return err
}

const insertTranslates = `-- name: InsertTranslates :one
INSERT INTO translates (phrase_id, language_id, phrase, phrase_hint)
VALUES ($1, $2, $3, $4)
RETURNING phrase_id, language_id, phrase, phrase_hint
`

type InsertTranslatesParams struct {
	PhraseID   int64  `json:"phrase_id"`
	LanguageID int16  `json:"language_id"`
	Phrase     string `json:"phrase"`
	PhraseHint string `json:"phrase_hint"`
}

func (q *Queries) InsertTranslates(ctx context.Context, arg InsertTranslatesParams) (Translate, error) {
	row := q.db.QueryRowContext(ctx, insertTranslates,
		arg.PhraseID,
		arg.LanguageID,
		arg.Phrase,
		arg.PhraseHint,
	)
	var i Translate
	err := row.Scan(
		&i.PhraseID,
		&i.LanguageID,
		&i.Phrase,
		&i.PhraseHint,
	)
	return i, err
}

const selectExistsTranslates = `-- name: SelectExistsTranslates :one
SELECT EXISTS(
    SELECT 1 FROM titles t
      JOIN phrases p ON t.id = p.title_id
      JOIN translates tr ON p.id = tr.phrase_id AND tr.language_id = $1
    WHERE tr.language_id = $1 and t.id = $2 ) AS "exists"
`

type SelectExistsTranslatesParams struct {
	LanguageID int16 `json:"language_id"`
	ID         int64 `json:"id"`
}

func (q *Queries) SelectExistsTranslates(ctx context.Context, arg SelectExistsTranslatesParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, selectExistsTranslates, arg.LanguageID, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const selectTranslatesByTitleIdLangId = `-- name: SelectTranslatesByTitleIdLangId :many
SELECT tr.phrase_id, tr.language_id, tr.phrase, tr.phrase_hint FROM titles t
    JOIN phrases p ON t.id = p.title_id
    JOIN translates tr ON p.id = tr.phrase_id AND tr.language_id = $1
WHERE tr.language_id = $1 and t.id = $2
`

type SelectTranslatesByTitleIdLangIdParams struct {
	LanguageID int16 `json:"language_id"`
	ID         int64 `json:"id"`
}

func (q *Queries) SelectTranslatesByTitleIdLangId(ctx context.Context, arg SelectTranslatesByTitleIdLangIdParams) ([]Translate, error) {
	rows, err := q.db.QueryContext(ctx, selectTranslatesByTitleIdLangId, arg.LanguageID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Translate{}
	for rows.Next() {
		var i Translate
		if err := rows.Scan(
			&i.PhraseID,
			&i.LanguageID,
			&i.Phrase,
			&i.PhraseHint,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
