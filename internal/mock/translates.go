// Code generated by MockGen. DO NOT EDIT.
// Source: api/translates.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	language "golang.org/x/text/language"
	db "talkliketv.click/tltv/db/sqlc"
	util "talkliketv.click/tltv/internal/util"
)

// MockTranslateX is a mock of TranslateX interface.
type MockTranslateX struct {
	ctrl     *gomock.Controller
	recorder *MockTranslateXMockRecorder
}

// MockTranslateXMockRecorder is the mock recorder for MockTranslateX.
type MockTranslateXMockRecorder struct {
	mock *MockTranslateX
}

// NewMockTranslateX creates a new mock instance.
func NewMockTranslateX(ctrl *gomock.Controller) *MockTranslateX {
	mock := &MockTranslateX{ctrl: ctrl}
	mock.recorder = &MockTranslateXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslateX) EXPECT() *MockTranslateXMockRecorder {
	return m.recorder
}

// InsertNewPhrases mocks base method.
func (m *MockTranslateX) InsertNewPhrases(arg0 echo.Context, arg1 db.Title, arg2 db.Querier, arg3 []string) ([]db.Translate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewPhrases", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]db.Translate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewPhrases indicates an expected call of InsertNewPhrases.
func (mr *MockTranslateXMockRecorder) InsertNewPhrases(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewPhrases", reflect.TypeOf((*MockTranslateX)(nil).InsertNewPhrases), arg0, arg1, arg2, arg3)
}

// InsertTranslates mocks base method.
func (m *MockTranslateX) InsertTranslates(arg0 echo.Context, arg1 db.Querier, arg2 int16, arg3 []util.TranslatesReturn) ([]db.Translate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTranslates", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]db.Translate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTranslates indicates an expected call of InsertTranslates.
func (mr *MockTranslateXMockRecorder) InsertTranslates(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTranslates", reflect.TypeOf((*MockTranslateX)(nil).InsertTranslates), arg0, arg1, arg2, arg3)
}

// TextToSpeech mocks base method.
func (m *MockTranslateX) TextToSpeech(arg0 echo.Context, arg1 []db.Translate, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextToSpeech", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TextToSpeech indicates an expected call of TextToSpeech.
func (mr *MockTranslateXMockRecorder) TextToSpeech(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextToSpeech", reflect.TypeOf((*MockTranslateX)(nil).TextToSpeech), arg0, arg1, arg2, arg3)
}

// TranslatePhrases mocks base method.
func (m *MockTranslateX) TranslatePhrases(arg0 echo.Context, arg1 []db.SelectTranslatesByTitleIdLangIdRow, arg2 language.Tag) ([]util.TranslatesReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslatePhrases", arg0, arg1, arg2)
	ret0, _ := ret[0].([]util.TranslatesReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslatePhrases indicates an expected call of TranslatePhrases.
func (mr *MockTranslateXMockRecorder) TranslatePhrases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePhrases", reflect.TypeOf((*MockTranslateX)(nil).TranslatePhrases), arg0, arg1, arg2)
}
