// Code generated by MockGen. DO NOT EDIT.
// Source: talkliketv.click/tltv/db/sqlc (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/mock/db/store.go talkliketv.click/tltv/db/sqlc Querier
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	db "talkliketv.click/tltv/db/sqlc"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// DeleteTitleById mocks base method.
func (m *MockQuerier) DeleteTitleById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTitleById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTitleById indicates an expected call of DeleteTitleById.
func (mr *MockQuerierMockRecorder) DeleteTitleById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTitleById", reflect.TypeOf((*MockQuerier)(nil).DeleteTitleById), ctx, id)
}

// DeleteTranslatesByLanguageId mocks base method.
func (m *MockQuerier) DeleteTranslatesByLanguageId(ctx context.Context, arg db.DeleteTranslatesByLanguageIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTranslatesByLanguageId", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTranslatesByLanguageId indicates an expected call of DeleteTranslatesByLanguageId.
func (mr *MockQuerierMockRecorder) DeleteTranslatesByLanguageId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTranslatesByLanguageId", reflect.TypeOf((*MockQuerier)(nil).DeleteTranslatesByLanguageId), ctx, arg)
}

// DeleteUserById mocks base method.
func (m *MockQuerier) DeleteUserById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockQuerierMockRecorder) DeleteUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockQuerier)(nil).DeleteUserById), ctx, id)
}

// DeleteUserPermissionById mocks base method.
func (m *MockQuerier) DeleteUserPermissionById(ctx context.Context, arg db.DeleteUserPermissionByIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermissionById", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPermissionById indicates an expected call of DeleteUserPermissionById.
func (mr *MockQuerierMockRecorder) DeleteUserPermissionById(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermissionById", reflect.TypeOf((*MockQuerier)(nil).DeleteUserPermissionById), ctx, arg)
}

// InsertPhrases mocks base method.
func (m *MockQuerier) InsertPhrases(ctx context.Context, titleID int64) (db.Phrase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhrases", ctx, titleID)
	ret0, _ := ret[0].(db.Phrase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPhrases indicates an expected call of InsertPhrases.
func (mr *MockQuerierMockRecorder) InsertPhrases(ctx, titleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhrases", reflect.TypeOf((*MockQuerier)(nil).InsertPhrases), ctx, titleID)
}

// InsertTitle mocks base method.
func (m *MockQuerier) InsertTitle(ctx context.Context, arg db.InsertTitleParams) (db.Title, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTitle", ctx, arg)
	ret0, _ := ret[0].(db.Title)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTitle indicates an expected call of InsertTitle.
func (mr *MockQuerierMockRecorder) InsertTitle(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTitle", reflect.TypeOf((*MockQuerier)(nil).InsertTitle), ctx, arg)
}

// InsertTranslates mocks base method.
func (m *MockQuerier) InsertTranslates(ctx context.Context, arg db.InsertTranslatesParams) (db.Translate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTranslates", ctx, arg)
	ret0, _ := ret[0].(db.Translate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTranslates indicates an expected call of InsertTranslates.
func (mr *MockQuerierMockRecorder) InsertTranslates(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTranslates", reflect.TypeOf((*MockQuerier)(nil).InsertTranslates), ctx, arg)
}

// InsertUser mocks base method.
func (m *MockQuerier) InsertUser(ctx context.Context, arg db.InsertUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockQuerierMockRecorder) InsertUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockQuerier)(nil).InsertUser), ctx, arg)
}

// InsertUserPermission mocks base method.
func (m *MockQuerier) InsertUserPermission(ctx context.Context, arg db.InsertUserPermissionParams) (db.UsersPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserPermission", ctx, arg)
	ret0, _ := ret[0].(db.UsersPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserPermission indicates an expected call of InsertUserPermission.
func (mr *MockQuerierMockRecorder) InsertUserPermission(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserPermission", reflect.TypeOf((*MockQuerier)(nil).InsertUserPermission), ctx, arg)
}

// ListLanguages mocks base method.
func (m *MockQuerier) ListLanguages(ctx context.Context) ([]db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguages", ctx)
	ret0, _ := ret[0].([]db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLanguages indicates an expected call of ListLanguages.
func (mr *MockQuerierMockRecorder) ListLanguages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguages", reflect.TypeOf((*MockQuerier)(nil).ListLanguages), ctx)
}

// ListLanguagesSimilar mocks base method.
func (m *MockQuerier) ListLanguagesSimilar(ctx context.Context, similarity string) ([]db.ListLanguagesSimilarRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguagesSimilar", ctx, similarity)
	ret0, _ := ret[0].([]db.ListLanguagesSimilarRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLanguagesSimilar indicates an expected call of ListLanguagesSimilar.
func (mr *MockQuerierMockRecorder) ListLanguagesSimilar(ctx, similarity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguagesSimilar", reflect.TypeOf((*MockQuerier)(nil).ListLanguagesSimilar), ctx, similarity)
}

// ListTitles mocks base method.
func (m *MockQuerier) ListTitles(ctx context.Context, arg db.ListTitlesParams) ([]db.ListTitlesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTitles", ctx, arg)
	ret0, _ := ret[0].([]db.ListTitlesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTitles indicates an expected call of ListTitles.
func (mr *MockQuerierMockRecorder) ListTitles(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTitles", reflect.TypeOf((*MockQuerier)(nil).ListTitles), ctx, arg)
}

// ListTitlesByOgLanguage mocks base method.
func (m *MockQuerier) ListTitlesByOgLanguage(ctx context.Context, arg db.ListTitlesByOgLanguageParams) ([]db.ListTitlesByOgLanguageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTitlesByOgLanguage", ctx, arg)
	ret0, _ := ret[0].([]db.ListTitlesByOgLanguageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTitlesByOgLanguage indicates an expected call of ListTitlesByOgLanguage.
func (mr *MockQuerierMockRecorder) ListTitlesByOgLanguage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTitlesByOgLanguage", reflect.TypeOf((*MockQuerier)(nil).ListTitlesByOgLanguage), ctx, arg)
}

// ListVoices mocks base method.
func (m *MockQuerier) ListVoices(ctx context.Context) ([]db.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVoices", ctx)
	ret0, _ := ret[0].([]db.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVoices indicates an expected call of ListVoices.
func (mr *MockQuerierMockRecorder) ListVoices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVoices", reflect.TypeOf((*MockQuerier)(nil).ListVoices), ctx)
}

// SelectExistsTranslates mocks base method.
func (m *MockQuerier) SelectExistsTranslates(ctx context.Context, arg db.SelectExistsTranslatesParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectExistsTranslates", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectExistsTranslates indicates an expected call of SelectExistsTranslates.
func (mr *MockQuerierMockRecorder) SelectExistsTranslates(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectExistsTranslates", reflect.TypeOf((*MockQuerier)(nil).SelectExistsTranslates), ctx, arg)
}

// SelectLanguagesById mocks base method.
func (m *MockQuerier) SelectLanguagesById(ctx context.Context, id int16) (db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLanguagesById", ctx, id)
	ret0, _ := ret[0].(db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLanguagesById indicates an expected call of SelectLanguagesById.
func (mr *MockQuerierMockRecorder) SelectLanguagesById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLanguagesById", reflect.TypeOf((*MockQuerier)(nil).SelectLanguagesById), ctx, id)
}

// SelectPermissionByCode mocks base method.
func (m *MockQuerier) SelectPermissionByCode(ctx context.Context, code string) (db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPermissionByCode", ctx, code)
	ret0, _ := ret[0].(db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPermissionByCode indicates an expected call of SelectPermissionByCode.
func (mr *MockQuerierMockRecorder) SelectPermissionByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPermissionByCode", reflect.TypeOf((*MockQuerier)(nil).SelectPermissionByCode), ctx, code)
}

// SelectPhraseIdsByTitleId mocks base method.
func (m *MockQuerier) SelectPhraseIdsByTitleId(ctx context.Context, titleID int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPhraseIdsByTitleId", ctx, titleID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPhraseIdsByTitleId indicates an expected call of SelectPhraseIdsByTitleId.
func (mr *MockQuerierMockRecorder) SelectPhraseIdsByTitleId(ctx, titleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPhraseIdsByTitleId", reflect.TypeOf((*MockQuerier)(nil).SelectPhraseIdsByTitleId), ctx, titleID)
}

// SelectTitleById mocks base method.
func (m *MockQuerier) SelectTitleById(ctx context.Context, id int64) (db.Title, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTitleById", ctx, id)
	ret0, _ := ret[0].(db.Title)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTitleById indicates an expected call of SelectTitleById.
func (mr *MockQuerierMockRecorder) SelectTitleById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTitleById", reflect.TypeOf((*MockQuerier)(nil).SelectTitleById), ctx, id)
}

// SelectTranslatesByTitleIdLangId mocks base method.
func (m *MockQuerier) SelectTranslatesByTitleIdLangId(ctx context.Context, arg db.SelectTranslatesByTitleIdLangIdParams) ([]db.Translate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTranslatesByTitleIdLangId", ctx, arg)
	ret0, _ := ret[0].([]db.Translate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTranslatesByTitleIdLangId indicates an expected call of SelectTranslatesByTitleIdLangId.
func (mr *MockQuerierMockRecorder) SelectTranslatesByTitleIdLangId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTranslatesByTitleIdLangId", reflect.TypeOf((*MockQuerier)(nil).SelectTranslatesByTitleIdLangId), ctx, arg)
}

// SelectTranslatesWithCorrect mocks base method.
func (m *MockQuerier) SelectTranslatesWithCorrect(ctx context.Context, arg db.SelectTranslatesWithCorrectParams) ([]db.SelectTranslatesWithCorrectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTranslatesWithCorrect", ctx, arg)
	ret0, _ := ret[0].([]db.SelectTranslatesWithCorrectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTranslatesWithCorrect indicates an expected call of SelectTranslatesWithCorrect.
func (mr *MockQuerierMockRecorder) SelectTranslatesWithCorrect(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTranslatesWithCorrect", reflect.TypeOf((*MockQuerier)(nil).SelectTranslatesWithCorrect), ctx, arg)
}

// SelectUserById mocks base method.
func (m *MockQuerier) SelectUserById(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserById", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserById indicates an expected call of SelectUserById.
func (mr *MockQuerierMockRecorder) SelectUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserById", reflect.TypeOf((*MockQuerier)(nil).SelectUserById), ctx, id)
}

// SelectUserByName mocks base method.
func (m *MockQuerier) SelectUserByName(ctx context.Context, name string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByName", ctx, name)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByName indicates an expected call of SelectUserByName.
func (mr *MockQuerierMockRecorder) SelectUserByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByName", reflect.TypeOf((*MockQuerier)(nil).SelectUserByName), ctx, name)
}

// SelectUserPermissions mocks base method.
func (m *MockQuerier) SelectUserPermissions(ctx context.Context, userID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserPermissions", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserPermissions indicates an expected call of SelectUserPermissions.
func (mr *MockQuerierMockRecorder) SelectUserPermissions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserPermissions", reflect.TypeOf((*MockQuerier)(nil).SelectUserPermissions), ctx, userID)
}

// SelectUsersPhrasesByCorrect mocks base method.
func (m *MockQuerier) SelectUsersPhrasesByCorrect(ctx context.Context, arg db.SelectUsersPhrasesByCorrectParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersPhrasesByCorrect", ctx, arg)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersPhrasesByCorrect indicates an expected call of SelectUsersPhrasesByCorrect.
func (mr *MockQuerierMockRecorder) SelectUsersPhrasesByCorrect(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersPhrasesByCorrect", reflect.TypeOf((*MockQuerier)(nil).SelectUsersPhrasesByCorrect), ctx, arg)
}

// SelectUsersPhrasesByIds mocks base method.
func (m *MockQuerier) SelectUsersPhrasesByIds(ctx context.Context, arg db.SelectUsersPhrasesByIdsParams) (db.UsersPhrase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersPhrasesByIds", ctx, arg)
	ret0, _ := ret[0].(db.UsersPhrase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersPhrasesByIds indicates an expected call of SelectUsersPhrasesByIds.
func (mr *MockQuerierMockRecorder) SelectUsersPhrasesByIds(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersPhrasesByIds", reflect.TypeOf((*MockQuerier)(nil).SelectUsersPhrasesByIds), ctx, arg)
}

// SelectVoiceById mocks base method.
func (m *MockQuerier) SelectVoiceById(ctx context.Context, id int16) (db.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVoiceById", ctx, id)
	ret0, _ := ret[0].(db.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVoiceById indicates an expected call of SelectVoiceById.
func (mr *MockQuerierMockRecorder) SelectVoiceById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVoiceById", reflect.TypeOf((*MockQuerier)(nil).SelectVoiceById), ctx, id)
}

// SelectVoicesByLanguageId mocks base method.
func (m *MockQuerier) SelectVoicesByLanguageId(ctx context.Context, languageID int16) ([]db.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVoicesByLanguageId", ctx, languageID)
	ret0, _ := ret[0].([]db.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVoicesByLanguageId indicates an expected call of SelectVoicesByLanguageId.
func (mr *MockQuerierMockRecorder) SelectVoicesByLanguageId(ctx, languageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVoicesByLanguageId", reflect.TypeOf((*MockQuerier)(nil).SelectVoicesByLanguageId), ctx, languageID)
}

// UpdateUserById mocks base method.
func (m *MockQuerier) UpdateUserById(ctx context.Context, arg db.UpdateUserByIdParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserById indicates an expected call of UpdateUserById.
func (mr *MockQuerierMockRecorder) UpdateUserById(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockQuerier)(nil).UpdateUserById), ctx, arg)
}

// UpdateUsersPhrasesByThreeIds mocks base method.
func (m *MockQuerier) UpdateUsersPhrasesByThreeIds(ctx context.Context, arg db.UpdateUsersPhrasesByThreeIdsParams) (db.UsersPhrase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsersPhrasesByThreeIds", ctx, arg)
	ret0, _ := ret[0].(db.UsersPhrase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsersPhrasesByThreeIds indicates an expected call of UpdateUsersPhrasesByThreeIds.
func (mr *MockQuerierMockRecorder) UpdateUsersPhrasesByThreeIds(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersPhrasesByThreeIds", reflect.TypeOf((*MockQuerier)(nil).UpdateUsersPhrasesByThreeIds), ctx, arg)
}
