// Code generated by MockGen. DO NOT EDIT.
// Source: internal/translates/clients.go

// Package mockc is a generated GoMock package.
package mockc

import (
	context "context"
	reflect "reflect"

	texttospeechpb "cloud.google.com/go/texttospeech/apiv1/texttospeechpb"
	translate "cloud.google.com/go/translate"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	language "golang.org/x/text/language"
)

// MockTranslateClientX is a mock of TranslateClientX interface.
type MockTranslateClientX struct {
	ctrl     *gomock.Controller
	recorder *MockTranslateClientXMockRecorder
}

// MockTranslateClientXMockRecorder is the mock recorder for MockTranslateClientX.
type MockTranslateClientXMockRecorder struct {
	mock *MockTranslateClientX
}

// NewMockTranslateClientX creates a new mock instance.
func NewMockTranslateClientX(ctrl *gomock.Controller) *MockTranslateClientX {
	mock := &MockTranslateClientX{ctrl: ctrl}
	mock.recorder = &MockTranslateClientXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslateClientX) EXPECT() *MockTranslateClientXMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *MockTranslateClientX) Translate(arg0 context.Context, arg1 []string, arg2 language.Tag, arg3 *translate.Options) ([]translate.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]translate.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockTranslateClientXMockRecorder) Translate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockTranslateClientX)(nil).Translate), arg0, arg1, arg2, arg3)
}

// MockTTSClientX is a mock of TTSClientX interface.
type MockTTSClientX struct {
	ctrl     *gomock.Controller
	recorder *MockTTSClientXMockRecorder
}

// MockTTSClientXMockRecorder is the mock recorder for MockTTSClientX.
type MockTTSClientXMockRecorder struct {
	mock *MockTTSClientX
}

// NewMockTTSClientX creates a new mock instance.
func NewMockTTSClientX(ctrl *gomock.Controller) *MockTTSClientX {
	mock := &MockTTSClientX{ctrl: ctrl}
	mock.recorder = &MockTTSClientXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTTSClientX) EXPECT() *MockTTSClientXMockRecorder {
	return m.recorder
}

// SynthesizeSpeech mocks base method.
func (m *MockTTSClientX) SynthesizeSpeech(arg0 context.Context, arg1 *texttospeechpb.SynthesizeSpeechRequest, arg2 ...gax.CallOption) (*texttospeechpb.SynthesizeSpeechResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynthesizeSpeech", varargs...)
	ret0, _ := ret[0].(*texttospeechpb.SynthesizeSpeechResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynthesizeSpeech indicates an expected call of SynthesizeSpeech.
func (mr *MockTTSClientXMockRecorder) SynthesizeSpeech(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeSpeech", reflect.TypeOf((*MockTTSClientX)(nil).SynthesizeSpeech), varargs...)
}
