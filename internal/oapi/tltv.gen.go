// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PatchRequestAddReplaceTestOp.
const (
	Add     PatchRequestAddReplaceTestOp = "add"
	Replace PatchRequestAddReplaceTestOp = "replace"
	Test    PatchRequestAddReplaceTestOp = "test"
)

// AudioFromTitle defines model for AudioFromTitle.
type AudioFromTitle struct {
	FromVoiceId int16 `json:"fromVoiceId"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is standard and should be used if you are at a beginner or intermediate level of language learning
	// 2 is intermediate
	// 3 is advanced and repeats phrases less often and should only be used if you are at an advanced level
	// 4 is review and only repeats each phrase one time and can be used to review already learned phrases
	Pattern *int `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audio file (default is 4)
	Pause     *int  `json:"pause,omitempty"`
	TitleId   int64 `json:"titleId"`
	ToVoiceId int16 `json:"toVoiceId"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Language defines model for Language.
type Language struct {
	// Id id of language
	Id int16 `json:"id"`

	// Language string of language
	Language string `json:"language"`

	// Tag language tag used for google language methods
	Tag string `json:"tag"`
}

// NewTitle defines model for NewTitle.
type NewTitle struct {
	// Filename the file to upload
	Filename openapi_types.File `json:"filename"`

	// OgLanguageId Language id of title
	OgLanguageId int16 `json:"ogLanguageId"`

	// Title Name of the title
	Title string `json:"title"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Email of user
	Email string `json:"email"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int16 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int16 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// NewUserPermission defines model for NewUserPermission.
type NewUserPermission struct {
	// PermissionId Permission id of permission
	PermissionId int16 `json:"permissionId"`

	// UserId User id of user
	UserId int64 `json:"userId"`
}

// PatchRequest defines model for PatchRequest.
type PatchRequest = []PatchRequest_Item

// PatchRequest_Item defines model for PatchRequest.Item.
type PatchRequest_Item struct {
	union json.RawMessage
}

// PatchRequestAddReplaceTest defines model for PatchRequestAddReplaceTest.
type PatchRequestAddReplaceTest struct {
	// Op The operation to perform.
	Op PatchRequestAddReplaceTestOp `json:"op"`

	// Path A JSON Pointer path.
	Path string `json:"path"`

	// Value The value to add, replace or test.
	Value interface{} `json:"value"`
}

// PatchRequestAddReplaceTestOp The operation to perform.
type PatchRequestAddReplaceTestOp string

// Phrase defines model for Phrase.
type Phrase struct {
	// Id id of phrase
	Id int64 `json:"id"`

	// TitleId id of movie
	TitleId int64 `json:"titleId"`
}

// Title defines model for Title.
type Title struct {
	// Filename the file to upload
	Filename openapi_types.File `json:"filename"`

	// Id Unique id of the title
	Id int64 `json:"id"`

	// OgLanguageId Language id of title
	OgLanguageId int16 `json:"ogLanguageId"`

	// Title Name of the title
	Title string `json:"title"`
}

// TitlesTranslateRequest defines model for TitlesTranslateRequest.
type TitlesTranslateRequest struct {
	// NewLanguageId id of language to translate to
	NewLanguageId int16 `json:"newLanguageId"`

	// TitleId title id of title to translate from
	TitleId int64 `json:"titleId"`
}

// Translates defines model for Translates.
type Translates struct {
	LanguageId int16  `json:"languageId"`
	Phrase     string `json:"phrase"`
	PhraseHint string `json:"phraseHint"`
	PhraseId   int64  `json:"phraseId"`
}

// User defines model for User.
type User struct {
	// Email Email of user
	Email string `json:"email"`

	// Id Unique id of the user
	Id int64 `json:"id"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int16 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int16 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	// Password Password of user
	Password string `json:"password"`

	// Username Username of user
	Username string `json:"username"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	// Jwt token of user
	Jwt string `json:"jwt"`
}

// UserPermissionResponse defines model for UserPermissionResponse.
type UserPermissionResponse struct {
	// Id Unique id of the user permission
	Id int16 `json:"id"`

	// PermissionId Permission id of permission
	PermissionId int16 `json:"permissionId"`

	// UserId User id of user
	UserId int64 `json:"userId"`
}

// UsersPhrases defines model for UsersPhrases.
type UsersPhrases struct {
	// LanguageId id of language
	LanguageId int16 `json:"languageId"`

	// PhraseCorrect id of language
	PhraseCorrect int16 `json:"phraseCorrect"`

	// PhraseId id of phrase
	PhraseId int64 `json:"phraseId"`

	// TitleId id of title
	TitleId int64 `json:"titleId"`

	// UserId id of user
	UserId int64 `json:"userId"`
}

// Voice defines model for Voice.
type Voice struct {
	// Id id of voice
	Id int16 `json:"id"`

	// LanguageId id of language
	LanguageId int16 `json:"languageId"`

	// Name the name of the voice
	Name string `json:"name"`

	// NaturalSampleRateHertz the natural sample rate of the voice in hertz
	NaturalSampleRateHertz int16 `json:"naturalSampleRateHertz"`

	// SsmlGender gender of voice MALE|FEMALE
	SsmlGender string `json:"ssmlGender"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	// FileLanguageId the original language of the file you are uploading
	FileLanguageId string             `json:"fileLanguageId"`
	FilePath       openapi_types.File `json:"filePath"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"fromVoiceId"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is standard and should be used if you are at a beginner or intermediate level of language learning
	// 2 is intermediate
	// 3 is advanced and repeats phrases less often and should only be used if you are at an advanced level
	// 4 is review and only repeats each phrase one time and can be used to review already learned phrases
	Pattern *string `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audiofile (default is 4)
	Pause *string `json:"pause,omitempty"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"titleName"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"toVoiceId"`
}

// GetLanguagesParams defines parameters for GetLanguages.
type GetLanguagesParams struct {
	// Similarity find titles similar to
	Similarity *string `form:"similarity,omitempty" json:"similarity,omitempty"`
}

// GetPhrasesParams defines parameters for GetPhrases.
type GetPhrasesParams struct {
	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindTitlesParams defines parameters for FindTitles.
type FindTitlesParams struct {
	// Similarity find titles similar to
	Similarity string `form:"similarity" json:"similarity"`

	// Limit maximum number of results to return
	Limit int32 `form:"limit" json:"limit"`
}

// AddTitleMultipartBody defines parameters for AddTitle.
type AddTitleMultipartBody struct {
	FilePath   openapi_types.File `json:"filePath"`
	LanguageId string             `json:"languageId"`
	TitleName  string             `json:"titleName"`
}

// GetVoicesParams defines parameters for GetVoices.
type GetVoicesParams struct {
	// LanguageId filter by languageId
	LanguageId *int16 `form:"languageId,omitempty" json:"languageId,omitempty"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// AudioFromTitleJSONRequestBody defines body for AudioFromTitle for application/json ContentType.
type AudioFromTitleJSONRequestBody = AudioFromTitle

// AddTitleMultipartRequestBody defines body for AddTitle for multipart/form-data ContentType.
type AddTitleMultipartRequestBody AddTitleMultipartBody

// TitlesTranslateJSONRequestBody defines body for TitlesTranslate for application/json ContentType.
type TitlesTranslateJSONRequestBody = TitlesTranslateRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// UpdateUserApplicationJSONPatchPlusJSONRequestBody defines body for UpdateUser for application/json-patch+json ContentType.
type UpdateUserApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// AddUserPermissionJSONRequestBody defines body for AddUserPermission for application/json ContentType.
type AddUserPermissionJSONRequestBody = NewUserPermission

// UpdateUsersPhrasesApplicationJSONPatchPlusJSONRequestBody defines body for UpdateUsersPhrases for application/json-patch+json ContentType.
type UpdateUsersPhrasesApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// AsPatchRequestAddReplaceTest returns the union data inside the PatchRequest_Item as a PatchRequestAddReplaceTest
func (t PatchRequest_Item) AsPatchRequestAddReplaceTest() (PatchRequestAddReplaceTest, error) {
	var body PatchRequestAddReplaceTest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchRequestAddReplaceTest overwrites any union data inside the PatchRequest_Item as the provided PatchRequestAddReplaceTest
func (t *PatchRequest_Item) FromPatchRequestAddReplaceTest(v PatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchRequestAddReplaceTest performs a merge with any union data inside the PatchRequest_Item, using the provided PatchRequestAddReplaceTest
func (t *PatchRequest_Item) MergePatchRequestAddReplaceTest(v PatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchRequest_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchRequest_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio/fromfile)
	AudioFromFile(ctx echo.Context) error

	// (POST /audio/fromtitle)
	AudioFromTitle(ctx echo.Context) error
	// Returns list of all available languages
	// (GET /languages)
	GetLanguages(ctx echo.Context, params GetLanguagesParams) error
	// Returns phrases by title_id
	// (GET /phrases)
	GetPhrases(ctx echo.Context, params GetPhrasesParams) error
	// Returns all titles
	// (GET /titles)
	FindTitles(ctx echo.Context, params FindTitlesParams) error
	// Creates a new title
	// (POST /titles)
	AddTitle(ctx echo.Context) error

	// (POST /titles/translate)
	TitlesTranslate(ctx echo.Context) error
	// Deletes a title by ID
	// (DELETE /titles/{id})
	DeleteTitle(ctx echo.Context, id int64) error
	// Returns a title by ID
	// (GET /titles/{id})
	FindTitleByID(ctx echo.Context, id int64) error
	// Creates a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Login a user
	// (POST /users/login)
	LoginUser(ctx echo.Context) error
	// Deletes a user by ID
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id int64) error
	// Returns a user by ID
	// (GET /users/{id})
	FindUserByID(ctx echo.Context, id int64) error
	// Patch an existing user
	// (PATCH /users/{id})
	UpdateUser(ctx echo.Context, id int64) error

	// (POST /userspermissions)
	AddUserPermission(ctx echo.Context) error
	// patches usersphrases resource
	// (PATCH /usersphrases/{phraseId}/{languageId})
	UpdateUsersPhrases(ctx echo.Context, phraseId int64, languageId int16) error
	// Returns list of all available voices
	// (GET /voices)
	GetVoices(ctx echo.Context, params GetVoicesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// AudioFromTitle converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromTitle(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromTitle(ctx)
	return err
}

// GetLanguages converts echo context to params.
func (w *ServerInterfaceWrapper) GetLanguages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLanguagesParams
	// ------------- Optional query parameter "similarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "similarity", ctx.QueryParams(), &params.Similarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter similarity: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLanguages(ctx, params)
	return err
}

// GetPhrases converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhrases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhrasesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPhrases(ctx, params)
	return err
}

// FindTitles converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTitlesParams
	// ------------- Required query parameter "similarity" -------------

	err = runtime.BindQueryParameter("form", true, true, "similarity", ctx.QueryParams(), &params.Similarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter similarity: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitles(ctx, params)
	return err
}

// AddTitle converts echo context to params.
func (w *ServerInterfaceWrapper) AddTitle(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddTitle(ctx)
	return err
}

// TitlesTranslate converts echo context to params.
func (w *ServerInterfaceWrapper) TitlesTranslate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TitlesTranslate(ctx)
	return err
}

// DeleteTitle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTitle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTitle(ctx, id)
	return err
}

// FindTitleByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitleByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitleByID(ctx, id)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// FindUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindUserByID(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// AddUserPermission converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserPermission(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"global:admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserPermission(ctx)
	return err
}

// UpdateUsersPhrases converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUsersPhrases(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "phraseId" -------------
	var phraseId int64

	err = runtime.BindStyledParameterWithOptions("simple", "phraseId", ctx.Param("phraseId"), &phraseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phraseId: %s", err))
	}

	// ------------- Path parameter "languageId" -------------
	var languageId int16

	err = runtime.BindStyledParameterWithOptions("simple", "languageId", ctx.Param("languageId"), &languageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter languageId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUsersPhrases(ctx, phraseId, languageId)
	return err
}

// GetVoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoices(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoicesParams
	// ------------- Optional query parameter "languageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "languageId", ctx.QueryParams(), &params.LanguageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter languageId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVoices(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio/fromfile", wrapper.AudioFromFile)
	router.POST(baseURL+"/audio/fromtitle", wrapper.AudioFromTitle)
	router.GET(baseURL+"/languages", wrapper.GetLanguages)
	router.GET(baseURL+"/phrases", wrapper.GetPhrases)
	router.GET(baseURL+"/titles", wrapper.FindTitles)
	router.POST(baseURL+"/titles", wrapper.AddTitle)
	router.POST(baseURL+"/titles/translate", wrapper.TitlesTranslate)
	router.DELETE(baseURL+"/titles/:id", wrapper.DeleteTitle)
	router.GET(baseURL+"/titles/:id", wrapper.FindTitleByID)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.POST(baseURL+"/users/login", wrapper.LoginUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:id", wrapper.FindUserByID)
	router.PATCH(baseURL+"/users/:id", wrapper.UpdateUser)
	router.POST(baseURL+"/userspermissions", wrapper.AddUserPermission)
	router.PATCH(baseURL+"/usersphrases/:phraseId/:languageId", wrapper.UpdateUsersPhrases)
	router.GET(baseURL+"/voices", wrapper.GetVoices)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
