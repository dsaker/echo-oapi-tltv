// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PatchRequestAddReplaceTestOp.
const (
	Add     PatchRequestAddReplaceTestOp = "add"
	Replace PatchRequestAddReplaceTestOp = "replace"
	Test    PatchRequestAddReplaceTestOp = "test"
)

// AudioFromTitle defines model for AudioFromTitle.
type AudioFromTitle struct {
	FromVoiceId int16 `json:"fromVoiceId"`
	TitleId     int64 `json:"titleId"`
	ToVoiceId   int16 `json:"toVoiceId"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Language defines model for Language.
type Language struct {
	// Id id of language
	Id int16 `json:"id"`

	// Language string of language
	Language string `json:"language"`

	// Tag language tag used for google language methods
	Tag string `json:"tag"`
}

// NewTitle defines model for NewTitle.
type NewTitle struct {
	// Filename the file to upload
	Filename openapi_types.File `json:"filename"`

	// OgLanguageId Language id of title
	OgLanguageId int16 `json:"ogLanguageId"`

	// Title Name of the title
	Title string `json:"title"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Email of user
	Email string `json:"email"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int16 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int16 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// NewUserPermission defines model for NewUserPermission.
type NewUserPermission struct {
	// PermissionId Permission id of permission
	PermissionId int16 `json:"permissionId"`

	// UserId User id of user
	UserId int64 `json:"userId"`
}

// PatchRequest defines model for PatchRequest.
type PatchRequest = []PatchRequest_Item

// PatchRequest_Item defines model for PatchRequest.Item.
type PatchRequest_Item struct {
	union json.RawMessage
}

// PatchRequestAddReplaceTest defines model for PatchRequestAddReplaceTest.
type PatchRequestAddReplaceTest struct {
	// Op The operation to perform.
	Op PatchRequestAddReplaceTestOp `json:"op"`

	// Path A JSON Pointer path.
	Path string `json:"path"`

	// Value The value to add, replace or test.
	Value interface{} `json:"value"`
}

// PatchRequestAddReplaceTestOp The operation to perform.
type PatchRequestAddReplaceTestOp string

// Phrase defines model for Phrase.
type Phrase struct {
	// Id id of phrase
	Id int64 `json:"id"`

	// TitleId id of movie
	TitleId int64 `json:"titleId"`
}

// Title defines model for Title.
type Title struct {
	// Filename the file to upload
	Filename openapi_types.File `json:"filename"`

	// Id Unique id of the title
	Id int64 `json:"id"`

	// OgLanguageId Language id of title
	OgLanguageId int16 `json:"ogLanguageId"`

	// Title Name of the title
	Title string `json:"title"`
}

// TitlesTranslateRequest defines model for TitlesTranslateRequest.
type TitlesTranslateRequest struct {
	// NewLanguageId id of language to translate to
	NewLanguageId int16 `json:"newLanguageId"`

	// TitleId title id of title to translate from
	TitleId int64 `json:"titleId"`
}

// Translates defines model for Translates.
type Translates struct {
	LanguageId int16  `json:"languageId"`
	Phrase     string `json:"phrase"`
	PhraseHint string `json:"phraseHint"`
	PhraseId   int64  `json:"phraseId"`
}

// User defines model for User.
type User struct {
	// Email Email of user
	Email string `json:"email"`

	// Id Unique id of the user
	Id int64 `json:"id"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int16 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int16 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	// Password Password of user
	Password string `json:"password"`

	// Username Username of user
	Username string `json:"username"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	// Jwt token of user
	Jwt string `json:"jwt"`
}

// UserPermissionResponse defines model for UserPermissionResponse.
type UserPermissionResponse struct {
	// Id Unique id of the user permission
	Id int16 `json:"id"`

	// PermissionId Permission id of permission
	PermissionId int16 `json:"permissionId"`

	// UserId User id of user
	UserId int64 `json:"userId"`
}

// UsersPhrases defines model for UsersPhrases.
type UsersPhrases struct {
	// LanguageId id of language
	LanguageId int16 `json:"languageId"`

	// PhraseCorrect id of language
	PhraseCorrect int16 `json:"phraseCorrect"`

	// PhraseId id of phrase
	PhraseId int64 `json:"phraseId"`

	// TitleId id of title
	TitleId int64 `json:"titleId"`

	// UserId id of user
	UserId int64 `json:"userId"`
}

// Voice defines model for Voice.
type Voice struct {
	// Id id of voice
	Id int16 `json:"id"`

	// LanguageId id of language
	LanguageId int16 `json:"languageId"`

	// Name the name of the voice
	Name string `json:"name"`

	// NaturalSampleRateHertz the natural sample rate of the voice in hertz
	NaturalSampleRateHertz int16 `json:"naturalSampleRateHertz"`

	// SsmlGender gender of voice MALE|FEMALE
	SsmlGender string `json:"ssmlGender"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	FileLanguageId string             `json:"fileLanguageId"`
	FilePath       openapi_types.File `json:"filePath"`
	FromVoiceId    string             `json:"fromVoiceId"`
	TitleName      string             `json:"titleName"`
	ToVoiceId      string             `json:"toVoiceId"`
}

// GetLanguagesParams defines parameters for GetLanguages.
type GetLanguagesParams struct {
	// Similarity find titles similar to
	Similarity *string `form:"similarity,omitempty" json:"similarity,omitempty"`
}

// GetPhrasesParams defines parameters for GetPhrases.
type GetPhrasesParams struct {
	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindTitlesParams defines parameters for FindTitles.
type FindTitlesParams struct {
	// Similarity find titles similar to
	Similarity string `form:"similarity" json:"similarity"`

	// Limit maximum number of results to return
	Limit int32 `form:"limit" json:"limit"`
}

// AddTitleMultipartBody defines parameters for AddTitle.
type AddTitleMultipartBody struct {
	FilePath   openapi_types.File `json:"filePath"`
	LanguageId string             `json:"languageId"`
	TitleName  string             `json:"titleName"`
}

// GetVoicesParams defines parameters for GetVoices.
type GetVoicesParams struct {
	// LanguageId filter by languageId
	LanguageId *int16 `form:"languageId,omitempty" json:"languageId,omitempty"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// AudioFromTitleJSONRequestBody defines body for AudioFromTitle for application/json ContentType.
type AudioFromTitleJSONRequestBody = AudioFromTitle

// AddTitleMultipartRequestBody defines body for AddTitle for multipart/form-data ContentType.
type AddTitleMultipartRequestBody AddTitleMultipartBody

// TitlesTranslateJSONRequestBody defines body for TitlesTranslate for application/json ContentType.
type TitlesTranslateJSONRequestBody = TitlesTranslateRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// UpdateUserApplicationJSONPatchPlusJSONRequestBody defines body for UpdateUser for application/json-patch+json ContentType.
type UpdateUserApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// AddUserPermissionJSONRequestBody defines body for AddUserPermission for application/json ContentType.
type AddUserPermissionJSONRequestBody = NewUserPermission

// UpdateUsersPhrasesApplicationJSONPatchPlusJSONRequestBody defines body for UpdateUsersPhrases for application/json-patch+json ContentType.
type UpdateUsersPhrasesApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// AsPatchRequestAddReplaceTest returns the union data inside the PatchRequest_Item as a PatchRequestAddReplaceTest
func (t PatchRequest_Item) AsPatchRequestAddReplaceTest() (PatchRequestAddReplaceTest, error) {
	var body PatchRequestAddReplaceTest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchRequestAddReplaceTest overwrites any union data inside the PatchRequest_Item as the provided PatchRequestAddReplaceTest
func (t *PatchRequest_Item) FromPatchRequestAddReplaceTest(v PatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchRequestAddReplaceTest performs a merge with any union data inside the PatchRequest_Item, using the provided PatchRequestAddReplaceTest
func (t *PatchRequest_Item) MergePatchRequestAddReplaceTest(v PatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchRequest_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchRequest_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio/fromfile)
	AudioFromFile(ctx echo.Context) error

	// (POST /audio/fromtitle)
	AudioFromTitle(ctx echo.Context) error
	// Returns list of all available languages
	// (GET /languages)
	GetLanguages(ctx echo.Context, params GetLanguagesParams) error
	// Returns phrases by title_id
	// (GET /phrases)
	GetPhrases(ctx echo.Context, params GetPhrasesParams) error
	// Returns all titles
	// (GET /titles)
	FindTitles(ctx echo.Context, params FindTitlesParams) error
	// Creates a new title
	// (POST /titles)
	AddTitle(ctx echo.Context) error

	// (POST /titles/translate)
	TitlesTranslate(ctx echo.Context) error
	// Deletes a title by ID
	// (DELETE /titles/{id})
	DeleteTitle(ctx echo.Context, id int64) error
	// Returns a title by ID
	// (GET /titles/{id})
	FindTitleByID(ctx echo.Context, id int64) error
	// Creates a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Login a user
	// (POST /users/login)
	LoginUser(ctx echo.Context) error
	// Deletes a user by ID
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id int64) error
	// Returns a user by ID
	// (GET /users/{id})
	FindUserByID(ctx echo.Context, id int64) error
	// Patch an existing user
	// (PATCH /users/{id})
	UpdateUser(ctx echo.Context, id int64) error

	// (POST /userspermissions)
	AddUserPermission(ctx echo.Context) error
	// patches usersphrases resource
	// (PATCH /usersphrases/{phraseId}/{languageId})
	UpdateUsersPhrases(ctx echo.Context, phraseId int64, languageId int16) error
	// Returns list of all available voices
	// (GET /voices)
	GetVoices(ctx echo.Context, params GetVoicesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// AudioFromTitle converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromTitle(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromTitle(ctx)
	return err
}

// GetLanguages converts echo context to params.
func (w *ServerInterfaceWrapper) GetLanguages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLanguagesParams
	// ------------- Optional query parameter "similarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "similarity", ctx.QueryParams(), &params.Similarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter similarity: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLanguages(ctx, params)
	return err
}

// GetPhrases converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhrases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhrasesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPhrases(ctx, params)
	return err
}

// FindTitles converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTitlesParams
	// ------------- Required query parameter "similarity" -------------

	err = runtime.BindQueryParameter("form", true, true, "similarity", ctx.QueryParams(), &params.Similarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter similarity: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitles(ctx, params)
	return err
}

// AddTitle converts echo context to params.
func (w *ServerInterfaceWrapper) AddTitle(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddTitle(ctx)
	return err
}

// TitlesTranslate converts echo context to params.
func (w *ServerInterfaceWrapper) TitlesTranslate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TitlesTranslate(ctx)
	return err
}

// DeleteTitle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTitle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTitle(ctx, id)
	return err
}

// FindTitleByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitleByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitleByID(ctx, id)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// FindUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindUserByID(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// AddUserPermission converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserPermission(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"global:admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserPermission(ctx)
	return err
}

// UpdateUsersPhrases converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUsersPhrases(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "phraseId" -------------
	var phraseId int64

	err = runtime.BindStyledParameterWithOptions("simple", "phraseId", ctx.Param("phraseId"), &phraseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phraseId: %s", err))
	}

	// ------------- Path parameter "languageId" -------------
	var languageId int16

	err = runtime.BindStyledParameterWithOptions("simple", "languageId", ctx.Param("languageId"), &languageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter languageId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUsersPhrases(ctx, phraseId, languageId)
	return err
}

// GetVoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoices(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoicesParams
	// ------------- Optional query parameter "languageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "languageId", ctx.QueryParams(), &params.LanguageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter languageId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVoices(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio/fromfile", wrapper.AudioFromFile)
	router.POST(baseURL+"/audio/fromtitle", wrapper.AudioFromTitle)
	router.GET(baseURL+"/languages", wrapper.GetLanguages)
	router.GET(baseURL+"/phrases", wrapper.GetPhrases)
	router.GET(baseURL+"/titles", wrapper.FindTitles)
	router.POST(baseURL+"/titles", wrapper.AddTitle)
	router.POST(baseURL+"/titles/translate", wrapper.TitlesTranslate)
	router.DELETE(baseURL+"/titles/:id", wrapper.DeleteTitle)
	router.GET(baseURL+"/titles/:id", wrapper.FindTitleByID)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.POST(baseURL+"/users/login", wrapper.LoginUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:id", wrapper.FindUserByID)
	router.PATCH(baseURL+"/users/:id", wrapper.UpdateUser)
	router.POST(baseURL+"/userspermissions", wrapper.AddUserPermission)
	router.PATCH(baseURL+"/usersphrases/:phraseId/:languageId", wrapper.UpdateUsersPhrases)
	router.GET(baseURL+"/voices", wrapper.GetVoices)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
