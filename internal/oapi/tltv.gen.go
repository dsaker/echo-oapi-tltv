// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PatchRequestAddReplaceTestOp.
const (
	Add     PatchRequestAddReplaceTestOp = "add"
	Replace PatchRequestAddReplaceTestOp = "replace"
	Test    PatchRequestAddReplaceTestOp = "test"
)

// AudioFromTitle defines model for AudioFromTitle.
type AudioFromTitle struct {
	FromVoiceId int16 `json:"fromVoiceId"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is standard and should be used if you are at a beginner or intermediate level of language learning
	// 2 is advanced and repeats phrases less often and should only be used if you are at an advanced level
	// 3 is review and only repeats each phrase one time and can be used to review already learned phrases
	Pattern *int `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audio file (default is 4)
	Pause     *int  `json:"pause,omitempty"`
	TitleId   int64 `json:"titleId"`
	ToVoiceId int16 `json:"toVoiceId"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Language defines model for Language.
type Language struct {
	// Id id of language
	Id int16 `json:"id"`

	// Language string of language
	Language string `json:"language"`

	// Tag language tag used for google language methods
	Tag string `json:"tag"`
}

// NewTitle defines model for NewTitle.
type NewTitle struct {
	// Filename the file to upload
	Filename openapi_types.File `json:"filename"`

	// OgLanguageId Language id of title
	OgLanguageId int16 `json:"ogLanguageId"`

	// Title Name of the title
	Title string `json:"title"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Email Email of user
	Email string `json:"email"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int16 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int16 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// NewUserPermission defines model for NewUserPermission.
type NewUserPermission struct {
	// PermissionId Permission id of permission
	PermissionId int16 `json:"permissionId"`

	// UserId User id of user
	UserId int64 `json:"userId"`
}

// PatchRequest defines model for PatchRequest.
type PatchRequest = []PatchRequest_Item

// PatchRequest_Item defines model for PatchRequest.Item.
type PatchRequest_Item struct {
	union json.RawMessage
}

// PatchRequestAddReplaceTest defines model for PatchRequestAddReplaceTest.
type PatchRequestAddReplaceTest struct {
	// Op The operation to perform.
	Op PatchRequestAddReplaceTestOp `json:"op"`

	// Path A JSON Pointer path.
	Path string `json:"path"`

	// Value The value to add, replace or test.
	Value interface{} `json:"value"`
}

// PatchRequestAddReplaceTestOp The operation to perform.
type PatchRequestAddReplaceTestOp string

// Phrase defines model for Phrase.
type Phrase struct {
	// Id id of phrase
	Id int64 `json:"id"`

	// TitleId id of movie
	TitleId int64 `json:"titleId"`
}

// Title defines model for Title.
type Title struct {
	// Filename the file to upload
	Filename openapi_types.File `json:"filename"`

	// Id Unique id of the title
	Id int64 `json:"id"`

	// OgLanguageId Language id of title
	OgLanguageId int16 `json:"ogLanguageId"`

	// Title Name of the title
	Title string `json:"title"`
}

// TitlesTranslateRequest defines model for TitlesTranslateRequest.
type TitlesTranslateRequest struct {
	// NewLanguageId id of language to translate to
	NewLanguageId int16 `json:"newLanguageId"`

	// TitleId title id of title to translate from
	TitleId int64 `json:"titleId"`
}

// Translates defines model for Translates.
type Translates struct {
	LanguageId int16  `json:"languageId"`
	Phrase     string `json:"phrase"`
	PhraseHint string `json:"phraseHint"`
	PhraseId   int64  `json:"phraseId"`
}

// User defines model for User.
type User struct {
	// Email Email of user
	Email string `json:"email"`

	// Id Unique id of the user
	Id int64 `json:"id"`

	// Name Username of user. Must be alphanumeric.
	Name string `json:"name"`

	// NewLanguageId Id of language to learn
	NewLanguageId int16 `json:"newLanguageId"`

	// OgLanguageId Id of native language
	OgLanguageId int16 `json:"ogLanguageId"`

	// Password Password of user
	Password string `json:"password"`

	// TitleId Id of title to learn
	TitleId int64 `json:"titleId"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	// Password Password of user
	Password string `json:"password"`

	// Username Username of user
	Username string `json:"username"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	// Jwt token of user
	Jwt string `json:"jwt"`
}

// UserPermissionResponse defines model for UserPermissionResponse.
type UserPermissionResponse struct {
	// Id Unique id of the user permission
	Id int16 `json:"id"`

	// PermissionId Permission id of permission
	PermissionId int16 `json:"permissionId"`

	// UserId User id of user
	UserId int64 `json:"userId"`
}

// UsersPhrases defines model for UsersPhrases.
type UsersPhrases struct {
	// LanguageId id of language
	LanguageId int16 `json:"languageId"`

	// PhraseCorrect id of language
	PhraseCorrect int16 `json:"phraseCorrect"`

	// PhraseId id of phrase
	PhraseId int64 `json:"phraseId"`

	// TitleId id of title
	TitleId int64 `json:"titleId"`

	// UserId id of user
	UserId int64 `json:"userId"`
}

// Voice defines model for Voice.
type Voice struct {
	// Id id of voice
	Id int16 `json:"id"`

	// LanguageId id of language
	LanguageId int16 `json:"languageId"`

	// Name the name of the voice
	Name string `json:"name"`

	// NaturalSampleRateHertz the natural sample rate of the voice in hertz
	NaturalSampleRateHertz int16 `json:"naturalSampleRateHertz"`

	// SsmlGender gender of voice MALE|FEMALE
	SsmlGender string `json:"ssmlGender"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	// FileLanguageId the original language of the file you are uploading
	FileLanguageId string             `json:"fileLanguageId"`
	FilePath       openapi_types.File `json:"filePath"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"fromVoiceId"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is standard and should be used if you are at a beginner or intermediate level of language learning
	// 2 is advanced and repeats phrases less often and should only be used if you are at an advanced level
	// 3 is review and only repeats each phrase one time and can be used to review already learned phrases
	Pattern *string `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audiofile (default is 4)
	Pause *string `json:"pause,omitempty"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"titleName"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"toVoiceId"`
}

// GetLanguagesParams defines parameters for GetLanguages.
type GetLanguagesParams struct {
	// Similarity find titles similar to
	Similarity *string `form:"similarity,omitempty" json:"similarity,omitempty"`
}

// GetPhrasesParams defines parameters for GetPhrases.
type GetPhrasesParams struct {
	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindTitlesParams defines parameters for FindTitles.
type FindTitlesParams struct {
	// Similarity find titles similar to
	Similarity string `form:"similarity" json:"similarity"`

	// Limit maximum number of results to return
	Limit int32 `form:"limit" json:"limit"`
}

// AddTitleMultipartBody defines parameters for AddTitle.
type AddTitleMultipartBody struct {
	FilePath   openapi_types.File `json:"filePath"`
	LanguageId string             `json:"languageId"`
	TitleName  string             `json:"titleName"`
}

// GetVoicesParams defines parameters for GetVoices.
type GetVoicesParams struct {
	// LanguageId filter by languageId
	LanguageId *int16 `form:"languageId,omitempty" json:"languageId,omitempty"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// AudioFromTitleJSONRequestBody defines body for AudioFromTitle for application/json ContentType.
type AudioFromTitleJSONRequestBody = AudioFromTitle

// AddTitleMultipartRequestBody defines body for AddTitle for multipart/form-data ContentType.
type AddTitleMultipartRequestBody AddTitleMultipartBody

// TitlesTranslateJSONRequestBody defines body for TitlesTranslate for application/json ContentType.
type TitlesTranslateJSONRequestBody = TitlesTranslateRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// UpdateUserApplicationJSONPatchPlusJSONRequestBody defines body for UpdateUser for application/json-patch+json ContentType.
type UpdateUserApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// AddUserPermissionJSONRequestBody defines body for AddUserPermission for application/json ContentType.
type AddUserPermissionJSONRequestBody = NewUserPermission

// UpdateUsersPhrasesApplicationJSONPatchPlusJSONRequestBody defines body for UpdateUsersPhrases for application/json-patch+json ContentType.
type UpdateUsersPhrasesApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// AsPatchRequestAddReplaceTest returns the union data inside the PatchRequest_Item as a PatchRequestAddReplaceTest
func (t PatchRequest_Item) AsPatchRequestAddReplaceTest() (PatchRequestAddReplaceTest, error) {
	var body PatchRequestAddReplaceTest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchRequestAddReplaceTest overwrites any union data inside the PatchRequest_Item as the provided PatchRequestAddReplaceTest
func (t *PatchRequest_Item) FromPatchRequestAddReplaceTest(v PatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchRequestAddReplaceTest performs a merge with any union data inside the PatchRequest_Item, using the provided PatchRequestAddReplaceTest
func (t *PatchRequest_Item) MergePatchRequestAddReplaceTest(v PatchRequestAddReplaceTest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchRequest_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchRequest_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio/fromfile)
	AudioFromFile(ctx echo.Context) error

	// (POST /audio/fromtitle)
	AudioFromTitle(ctx echo.Context) error
	// Returns list of all available languages
	// (GET /languages)
	GetLanguages(ctx echo.Context, params GetLanguagesParams) error
	// Returns phrases by title_id
	// (GET /phrases)
	GetPhrases(ctx echo.Context, params GetPhrasesParams) error
	// Returns all titles
	// (GET /titles)
	FindTitles(ctx echo.Context, params FindTitlesParams) error
	// Creates a new title
	// (POST /titles)
	AddTitle(ctx echo.Context) error

	// (POST /titles/translate)
	TitlesTranslate(ctx echo.Context) error
	// Deletes a title by ID
	// (DELETE /titles/{id})
	DeleteTitle(ctx echo.Context, id int64) error
	// Returns a title by ID
	// (GET /titles/{id})
	FindTitleByID(ctx echo.Context, id int64) error
	// Creates a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Login a user
	// (POST /users/login)
	LoginUser(ctx echo.Context) error
	// Deletes a user by ID
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id int64) error
	// Returns a user by ID
	// (GET /users/{id})
	FindUserByID(ctx echo.Context, id int64) error
	// Patch an existing user
	// (PATCH /users/{id})
	UpdateUser(ctx echo.Context, id int64) error

	// (POST /userspermissions)
	AddUserPermission(ctx echo.Context) error
	// patches usersphrases resource
	// (PATCH /usersphrases/{phraseId}/{languageId})
	UpdateUsersPhrases(ctx echo.Context, phraseId int64, languageId int16) error
	// Returns list of all available voices
	// (GET /voices)
	GetVoices(ctx echo.Context, params GetVoicesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// AudioFromTitle converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromTitle(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromTitle(ctx)
	return err
}

// GetLanguages converts echo context to params.
func (w *ServerInterfaceWrapper) GetLanguages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLanguagesParams
	// ------------- Optional query parameter "similarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "similarity", ctx.QueryParams(), &params.Similarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter similarity: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLanguages(ctx, params)
	return err
}

// GetPhrases converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhrases(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhrasesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPhrases(ctx, params)
	return err
}

// FindTitles converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTitlesParams
	// ------------- Required query parameter "similarity" -------------

	err = runtime.BindQueryParameter("form", true, true, "similarity", ctx.QueryParams(), &params.Similarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter similarity: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitles(ctx, params)
	return err
}

// AddTitle converts echo context to params.
func (w *ServerInterfaceWrapper) AddTitle(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddTitle(ctx)
	return err
}

// TitlesTranslate converts echo context to params.
func (w *ServerInterfaceWrapper) TitlesTranslate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"titles:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TitlesTranslate(ctx)
	return err
}

// DeleteTitle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTitle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTitle(ctx, id)
	return err
}

// FindTitleByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindTitleByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindTitleByID(ctx, id)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// FindUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindUserByID(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// AddUserPermission converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserPermission(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"global:admin"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserPermission(ctx)
	return err
}

// UpdateUsersPhrases converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUsersPhrases(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "phraseId" -------------
	var phraseId int64

	err = runtime.BindStyledParameterWithOptions("simple", "phraseId", ctx.Param("phraseId"), &phraseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phraseId: %s", err))
	}

	// ------------- Path parameter "languageId" -------------
	var languageId int16

	err = runtime.BindStyledParameterWithOptions("simple", "languageId", ctx.Param("languageId"), &languageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter languageId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUsersPhrases(ctx, phraseId, languageId)
	return err
}

// GetVoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoices(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoicesParams
	// ------------- Optional query parameter "languageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "languageId", ctx.QueryParams(), &params.LanguageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter languageId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVoices(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio/fromfile", wrapper.AudioFromFile)
	router.POST(baseURL+"/audio/fromtitle", wrapper.AudioFromTitle)
	router.GET(baseURL+"/languages", wrapper.GetLanguages)
	router.GET(baseURL+"/phrases", wrapper.GetPhrases)
	router.GET(baseURL+"/titles", wrapper.FindTitles)
	router.POST(baseURL+"/titles", wrapper.AddTitle)
	router.POST(baseURL+"/titles/translate", wrapper.TitlesTranslate)
	router.DELETE(baseURL+"/titles/:id", wrapper.DeleteTitle)
	router.GET(baseURL+"/titles/:id", wrapper.FindTitleByID)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.POST(baseURL+"/users/login", wrapper.LoginUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:id", wrapper.FindUserByID)
	router.PATCH(baseURL+"/users/:id", wrapper.UpdateUser)
	router.POST(baseURL+"/userspermissions", wrapper.AddUserPermission)
	router.PATCH(baseURL+"/usersphrases/:phraseId/:languageId", wrapper.UpdateUsersPhrases)
	router.GET(baseURL+"/voices", wrapper.GetVoices)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
